@page "/servers"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager


<h3>Server</h3>

<br />
<br />


<div class="container-fluid text-center ">
    <div class="row w-50">
        @foreach (string city in cities)
        {
        <div class="col">
                <div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase)? "border-primary" : "")">
                   <img src="@($"/images/{city}.png")" class="card-img-top" alt="Alternate Text" />
                    <div class="card-body">                        
                        <button type="button" class="btn btn-primary" 
                        @onclick="@(()=>{SelectCity(city);})">@city
                        </button>
                    </div>
                </div>            
        </div>
        }
    </div>
</div>


<br />

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search Servers" @onchange="HandleServerFilterChanged"/>
    <button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>



<ul>
    @foreach(var server in servers)
    {
        <li>
            @server.Name in @server.City is 
            <span style="color: @(server.IsOnline? "Green" : "Red")">
                @(server.IsOnline ? "Online" : "Offline") </span>
            &nbsp;
            <a href="/servers/@server.ServerId">Edit</a>
            &nbsp;
            <EditForm 
                Model="server"
                FormName="@($"form-server-{server.ServerId}")"
                OnValidSubmit="@(() => {DeleteServer(server.ServerId);})">
                <button type="submit" class="button btn-primary">Delete</button>
            </EditForm>
            
        </li>         
    }   
</ul>
<a href="/servers/add" class="btn btn-primary">Add Server</a>


@code {
    private List<Server> servers = ServersRepository.GetServersByCity("Toronto");   
    private List<string> cities = CitiesRepositories.GetCities();
    private string selectedCity = "Toronto";
    private string serverFilter = "";

    public void DeleteServer(int serverId)
    {
        if(serverId > 0)
        {
            ServersRepository.DeleteServer(serverId);
            NavigationManager.Refresh();
        }
    }

    private void SelectCity(string cityName)
    {
        this.selectedCity = cityName;
        this.servers = ServersRepository.GetServersByCity(this.selectedCity);
    }

    public void HandleServerFilterChanged(ChangeEventArgs args)
    {
        serverFilter = args.Value?.ToString() ?? string.Empty;
    }
    public void HandleSearch()
    {
        this.servers = ServersRepository.SearchServers(serverFilter);
        this.selectedCity = string.Empty;
    }
}
 